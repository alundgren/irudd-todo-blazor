@using Irudd.Todo.Data
@using Irudd.Todo.Components
@inject TodoService todoService
@inject Blazored.LocalStorage.ILocalStorageService localStorage

@code {
    private const string LocalStorageKey = "StoredCategories_20191130.2";
    private List<TodoCategory> categories;
    private string newItemText;

    protected override Task OnInitializedAsync()
    {
        todoService.OnChange += () => 
        {
            if(this.categories != null)
                this.localStorage.SetItemAsync(LocalStorageKey, this.categories);
            InvokeAsync(StateHasChanged);
        };
        return Task.CompletedTask;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            var storedCategories = await localStorage.GetItemAsync<List<TodoCategory>>(LocalStorageKey);
            if(storedCategories == null)
            {
                this.categories = await todoService.GetCategories();
            }
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task AddItem()
    {
        if(string.IsNullOrWhiteSpace(this.newItemText))
            return;
        var c = this.categories.FirstOrDefault(x => x.IsFocused);
        var newItemText = this.newItemText;
        this.newItemText = "";
        await this.todoService.AddItem(newItemText, c?.Text);         
    }

    private IEnumerable<TodoCategory> GetVisibleCategories()
    {
        if(categories == null)
            yield break;
        var f = categories.FirstOrDefault(x => x.IsFocused);
        if(f != null) {
            yield return f;
        } else {
            foreach(var c in categories)
            {
            yield return c;
            }
        }
    }

    private bool HasFocusedCategory() 
    {
        return categories != null && categories.Any(x => x.IsFocused);
    }

    private async Task RemoveDone()
    {
        var done = categories.SelectMany(x => x.Items.Where(y => y.IsDone).Select(y => Tuple.Create(x.Text, y.Text))).ToList();
        await todoService.RemoveDone(done);
    }
}

<div class="main-card-container">
    <div class="main-card card border-primary">
    <div class="card-header">
        <form class="bs-component prevent-default" id="id1">
        <div class="form-group">
            <div class="input-group">
            <input type="text" @bind="@newItemText" class="form-control" />
            <div class="input-group-append">
                <button @onclick="AddItem" type="submit" class="input-group-text prevent-default"><i class="fa fa-plus-circle"></i></button>
            </div>
            </div>
        </div>          
        </form>
    </div>
    <div class="card-body @(HasFocusedCategory() ? "card-body-focused" : "")">
        @foreach(var category in GetVisibleCategories())
        {
            <TodoCategoryView Category="@category"></TodoCategoryView>
        }
    </div>
    <div class="card-footer">
        <span @onclick="RemoveDone"><i class="fa fa-trash-o pull-right trash"></i></span>
    </div>
    </div>  
</div>